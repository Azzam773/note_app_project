//==============================================================================
// Note Model: نموذج البيانات (Data Model)
//==============================================================================
// [مهم للمناقشة]
// هذه الفئة (Class) هي "نموذج" أو "قالب" يمثل ملاحظة واحدة في تطبيقنا.
// هي لا تحتوي على أي منطق معقد، وظيفتها فقط هي حمل البيانات وتنظيمها.
// هذا المفهوم يسمى POCO (Plain Old CLR Object) في لغات أخرى، أو ببساطة Data Class.
//
// فائدة الـ Model:
// 1. تنظيم: بدلاً من التعامل مع متغيرات متفرقة (مثل title, content)، نتعامل مع كائن واحد Note.
// 2. أمان الأنواع (Type Safety): يضمن أن الـ id هو رقم، والـ title هو نص، إلخ. هذا يمنع أخطاء كثيرة.
// 3. سهولة التمرير: يمكننا تمرير كائن Note واحد بين الدوال والطبقات بدلاً من تمرير كل حقل على حدة.
//==============================================================================
class Note {
  // --- 1. تعريف الحقول (Fields) ---

  // final تعني أن هذه القيم لا يمكن تغييرها بعد إنشاء الكائن.
  // هذا يجعل كائناتنا "غير قابلة للتغيير" (Immutable)، وهي ممارسة جيدة تزيد من استقرار الكود.

  // id هو الرقم التعريفي للملاحظة في قاعدة البيانات.
  // نجعله اختياريًا (int?) لأن الملاحظة الجديدة لا يكون لها id قبل حفظها في قاعدة البيانات.
  final int? id;

  // عنوان الملاحظة.
  final String title;

  // محتوى الملاحظة.
  final String content;

  // تاريخ إنشاء الملاحظة.
  // يتم تخزينه كنص (String) بصيغة ISO 8601، وهي صيغة قياسية عالمية
  // تسهل عمليات التحويل والفرز (e.g., "2025-09-21T18:30:00.000Z").
  final String createdAt;

  // --- 2. الـ Constructor ---
  // هذا هو الـ constructor الذي نستخدمه لإنشاء كائن Note جديد.
  Note({
    this.id,
    required this.title,
    required this.content,
    required this.createdAt
  });

  // --- 3. دوال التحويل (Serialization/Deserialization) ---
  // [مهم للمناقشة]
  // قاعدة بيانات sqflite لا تفهم كائنات Dart مثل Note، هي تفهم فقط أنواعًا بسيطة
  // مثل الأرقام والنصوص، ويتم تنظيمها في Map<String, dynamic>.
  // لذلك، نحتاج إلى طريقتين للتحويل:
  // 1. toMap(): لتحويل كائن Note إلى Map قبل حفظه في قاعدة البيانات.
  // 2. fromMap(): لتحويل Map القادم من قاعدة البيانات إلى كائن Note يمكننا استخدامه في تطبيقنا.

  // دالة لتحويل الكائن إلى خريطة (Map) لتخزينه في قاعدة البيانات.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'content': content,
      'createdAt': createdAt,
    };
  }

  // factory constructor لبناء كائن من خريطة (Map) عند جلبه من قاعدة البيانات.
  // نستخدم factory هنا لأنها طريقة شائعة لإنشاء كائنات من هياكل بيانات أخرى مثل JSON أو Map.
  factory Note.fromMap(Map<String, dynamic> map) {
    return Note(
      id: map['id'],
      title: map['title'],
      content: map['content'],
      createdAt: map['createdAt'],
    );
  }
}